import Mathlib

variable {R : Type*} [NormedField R]
variable {A : Type*}
variable {n : ℕ}

open scoped ComplexOrder 
open Filter  

theorem convergence  
    {A : Type*} [NormedRing A] [NormedAlgebra ℂ A] [CompleteSpace A]
    (a : A)
    (h : Filter.limsup (fun n : ℕ ↦ (‖a ^ n‖₊ : ENNReal)) Filter.atTop < 1) :
    ∃ (r : ENNReal) (N : ℕ), 0 < r ∧ r < 1 ∧ ∀ (k : ℕ), N < k → (‖a ^ k‖₊ : ENNReal) < r := by
  -- Step 1: choose r ∈ (limsup, 1)
  obtain ⟨r, h_limsup_lt_r, h_r_lt_one⟩ := exists_between h
  have r_pos : 0 < r := lt_of_le_of_lt (zero_le _) h_limsup_lt_r
  -- Step 2: eventually, ‖a^n‖₊ < r
  have eventually_lt := Filter.eventually_lt_of_limsup_lt h_limsup_lt_r
  -- Step 3: unpack Filter.eventually to get ∃ N, ∀ n ≥ N, ...qq
  rw [Filter.eventually_atTop] at eventually_lt
  obtain ⟨N, hN⟩ := eventually_lt
  -- Step 4: package result
  use r, N
  refine ⟨r_pos, h_r_lt_one, fun k hk => hN k (Nat.le_of_lt hk)⟩  


theorem one_div_k_mul_k_eq_one 
    {A : Type*} [NormedRing A] [NormedAlgebra ℂ A] [CompleteSpace A] 
    (a : A) (k' : ℕ) (r : ENNReal) (N : ℕ)
    (lol : N < k')
    (h_bound : ↑‖a ^ k'‖₊ ^ (1 / ↑k') < r)
    (k'_pos : 0 < ↑k')
    (h_norm_nonneg : 0 ≤ ‖a ^ k'‖₊) :
    1 / ↑k' * ↑k' = 1 := by
  -- Convert k' to a real number
  let k_real : ℝ := k'
  -- Show it's non-zero
  have k_real_ne_zero : k_real ≠ 0 := by
    rw [← Nat.cast_zero, Nat.cast_lt]
    exact Nat.pos_iff_ne_zero.mp k'_pos
  -- Direct calculation
  field_simp [k_real_ne_zero]

theorem power_inequality_from_root
    {A : Type*} [NormedRing A] [NormedAlgebra ℂ A] [CompleteSpace A] 
    (a : A) (k' : ℕ) (r : ENNReal) (N : ℕ)
    (lol : N < k')
    (h_bound : ↑‖a ^ k'‖₊ ^ (1 / ↑k' : ℝ) < r) :
    ↑‖a ^ k'‖₊ < r ^ k' := by
  -- Step 1: k' > 0 in ℝ
  have k'_pos : 0 < (k' : ℝ) := Nat.cast_pos.mpr (Nat.lt_of_le_of_lt (Nat.zero_le _) lol)
  -- Step 2: Norm is nonnegative in ENNReal
  have h_norm_nonneg : 0 ≤ ↑‖a ^ k'‖₊ := zero_le _ 

  -- Step 3: Simplify the hypothesis
  have h_simplify : (↑‖a ^ k'‖₊ ^ (1 / ↑k' : ℝ)) ^ ↑k' = ↑‖a ^ k'‖₊ := by
      -- Use the fact that (x^(1/n))^n = x for x ≥ 0
      have : (1 / ↑k' : ℝ) * ↑k' = 1 := by
        rw [one_div] 
        
        rw [inv_mul_cancel (ne_of_gt k'_pos)]


      rw [← ENNReal.rpow_mul , h_norm_nonneg, this, ENNReal.rpow_one] 

  -- Step 4: Use monotonicity of x ↦ x^k'
  have h_mono : Monotone (fun x : ENNReal => x ^ k') := by
    intro x y hxy
    exact ENNReal.rpow_le_rpow hxy (Nat.cast_nonneg k')
  -- Step 5: Apply monotonicity
  have : (↑‖a ^ k'‖₊ ^ (1 / ↑k' : ℝ)) ^ ↑k' < r ^ ↑k' := by
    apply ENNReal.rpow_lt_rpow h_bound (Nat.cast_pos.mpr (Nat.pos_of_ne_zero _))
    exact ne_of_gt (Nat.lt_of_le_of_lt (Nat.zero_le _) lol)
  -- Step 6: Combine with simplification
  rw [h_simplify] at this
  -- Step 7: Convert r^↑k' to r^k'
  have : r ^ ↑k' = r ^ k' := by simp
  rw [this] at this
  exact this